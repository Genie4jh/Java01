**java.net.InetAddress
=> ip 정보를 저장하는 클래스 
=> static 메소드인 getLocalhost(), getByName(String hostname), getAllByName(String hostname)
getLocalHost(): 자기 컴퓨터의 IP 정보를 리턴
getByName은 host의 ip 정보 1개를 리턴
getAllByName 은 host의 모든 ip 정보를 리턴



**소켓 통신 ===================================================================

Socket: NIC(Network Interface Card - LAN Card)를 추상화한 클래스 
네트워크 프로그래밍이라는 용어 대신에 Socket Programing 이라고도 합니다. 

1. 통신 방법
1) TCP 프로토콜을 사용하는 스트림 소켓
2) UDP 프로토콜을 사용하는 데이터그램 소켓


2. TCP (연결형 통신) Transmission Control Protocol
	1수신하는 쪽에서 송신하는 쪽으로 연결을 요청
	2송신하는 쪽에서 연결을 하고 요청하는 데이터에 대한 메타 정보(데이터에 대한 정보 - 데이터 크기 등)를 송신
	3수신하는 쪽에서 그 정보를 보고 다시 요청을 합니다. 
	4송신하는 쪽에서 데이터를 전송
	5수신하는 쪽에서 데이터 수신 여부를 송신하는 쪽에 전송하고 통신이 종료
  + 신뢰성이 높지만 트래픽이 증가
  + HTTP, HTTPS 가 TCP 통신


3. UDP (비연결형 통신) User Datagram Protocol
=> 송신하는 쪽에서 수신하는 쪽으로 일방적으로 데이터를 전송하고 통신이 종료
DHCP(IP 동적 할당), DNS(Domain -> IP)
콜 센터, Apple의 APNS(Apple Push Notification Service - 애플 제품의 알림)
수신 쪽에서 데이터를 제대로 받았는 지 알 수 없음


4. Socket 클래스
1) 생성자
Socket()
Socket(InetAddress addr, int port): addr 의 port 번호에 해당하는 서비스에 접속
Socket(String addr, int port): addr 의 port 번호에 해당하는 서비스에 접속
Socke(InetAddress addr, int port, InetAddress localaddr, int localport): addr 의 port 번호에 접속을 하는데
자신의 주소를 localaddr 그리고 port 는 localport 로 설정해서 접속

=> addr 이 잘못되면 NullPointerException 그리고 port 번호가 잘못되면 illegalArgumentException 이 발생

2) 메소드
void close()
InetAddress getInetAddress(): 접속한 상대방 IP 정보
int getPort(): 상대방 포트 번호
InputStream getInputStream(): 상대방에게서 정보를 읽어오기 위한 스트림
OutputStream getOutputStream(): 상대방에게 정보를 전송하기 위한 스트림


5. 스트림 소켓 - TCP 통신을 위한 소켓

1) 수신 받는 쪽의 소켓 생성과 요청
> 연결
Socket 소켓변수 = new Socket(서버IP주소, 포트번호);	

> 요청 전송
OutputStream 출력스트림변수 = 소켓변수.getOutputStream();	

> 바이트 단위 전송
출력스트림변수.write(byte [] b);	

> 문자단위 전송
PrintWriter pw = new PrintWriter(출력스트림변수);
pw.println(String msg);
pw.flush();

> 데이터 읽어 오기
InputStream 입력스트림변수 = 소켓변수.getInputStream();

> 바이트 단위로 읽어오기 - 파일 다운로드
입력스트림변수.read(byte [] b);

> 문자열 단위로 읽어오기
BufferedReader br = new BuffereredRead(new InputStreamReader(입력스트림변수));
String msg = br.readLine();	// 한 줄 읽어오기
// null 을 리턴할 때 까지 읽으면 전송된 모든 내용을 읽을 수 있습니다. 


6.
public class IPInfo {

	public static void main(String[] args) {
		try {
			// 자신의 컴퓨터  IP 정보 확인 - 자신의 컴퓨터 이름(도메인) 과 IP 주소
			InetAddress local = InetAddress.getLocalHost();
			System.out.println(local);
			// 구글의 IP 정보 확인
			InetAddress [] googles = InetAddress.getAllByName("www.google.com");
			for(InetAddress imsi : googles) {
				System.out.println(imsi);
			}
			
		} catch(UnknownHostException e) {
			System.out.println("예외:" + e.getMessage());
		}

	}

}


7. TCP Server: 정보를 제공
=> ServerSocket 을 사용

1) 생성자
ServerSocket()
ServerSocket(int port): port를 개방해서 클라이언트의 요청을 받을 수 있도록 서버가 생성
ServerSocket(int port, int backlog): port를 개방해서 클라이언트의 요청을 받을 수 있도록 서버가 생성되고 최대 접속 개수를 설정

2) 메소드
void close()

Socket accept(): 호출하면 클라이언트의 요청이 올 때 까지 대기 상태가 되고 클라이언트의 요청이 오면 클라이언트와 통신할 수 있는
Socket을 리턴하고 다음으로 넘어갑니다. 

3) 통신과정
=> ServerSocket 을 생성해서 클라이언트의 요청의 기다림
=> 클라이언트 쪽에서 Socket을 이용해서 서버에 접속
=> Socket의 스트림을 가지고 메시지를 전송
=> ServerSocket 을 생성할 때 port는 사용 중이 아닌 번호로 설정 - 1024보다 큰 숫자로 설정하는 것을 권장
서버 소켓을 생성하고 예외가 발생해서 프로그램이 중단되면 이전에 사용한 포트번호를 사용하지 못할 수도 있습니다.
자바로 실행 중인 프로세스를 찾아서 중단해야 이전 포트를 다시 사용 가능합니다.
=> 현재 사용 중인 포트를 확인: netstat - ano
자신의 ip 확인: ipconfig(ifconfig - mac)

=> 다른 컴퓨터에서 자신의 컴퓨터에 접속하도록 하려면 방화벽 해제 되어 있어야 합니다. 


8. UDP
=> 비연결형 통신
=> 보내는 쪽에서 받는 쪽으로 메시지만 전송하고 통신이 종료

1) 통신방식
unicast: 1:1 로 통신하는 방식 (서버 같은거임)

multicast: 그룹에 속한 모든 클라이언트와 통신 (화상 회의 같은 거임)

broadcast: 자신의 IP 대역과 subnet mask를 이용해서 자신의 IP 대역과 같은 그룹에 속한 모든 클라이언트에게 전송 

2) DatagramPacket 클래스와 DatagramSocket 클래스 이용
=> DatagramSocket 클래스

# 생성자
DatagramSocket(): 전송을 하기 위한 소켓
DatagramSocket(int port): 전송을 받기 위한 소켓

# 메소드
void close()
void rceive(DatagramPacket packet): 데이터를 받는 메소드
void send(DatagramPacket packet): 데이터를 보내는 메소드

=> DaatagramPacket 클래스
# 생성자
DatagramPacket(byte [] buf, int length): 전송을 받기 위한 패킷으로 byte 배열에 데이터가 저장됩니다. 
DatagramPacket(byte [] buf, int length, InetAddress addr, int port): 전송을 하기 위한 패킷으로
byte 배열의 내용을 length 만큼 addr 의 port 에게 전송하기 위한 패킷

# 메소드
byte [] getDate(): 데이터 리턴
int getLength(): 길이 리턴

=> String 과 byte 배열 변환
String -> byte 배열 : String.getBytes();
byte 배열 -> String : new String(byte 배열);


3) unicast



4) multicast
=> 그룹에 속한 모든 단말에게 데이터를 전송하는 방식
=> 224.0.0.0 ~ 239.255.255.255 사이의 주소를 이용
이 주소 대역은 D Class 대역으로 Multicast 용으로 예약된 IP 주소 대역
=> MulticastSocket 을 이용해서 구현

# 생성자
MulticastSocket()
MulticastSocket(int port)

# 메소드
joinGroup(InetAddress addr): 그룹에 참여
leaveGroup(InetAddress addr): 그룹에서 빠져나오는 메소드

=> 데이터 전송방식은 DatagramSocket 과 동일





**URL 통신 ====================================================================

=> 소켓 통신을 저수준의 통신방식이라고 하고 그 이외의 통신 방식들은 고수준이라고 부릅니다. 
  + 성능은 소켓 통신이 우수한데 소켓 통신은 프로그램을 별도로 설치해야만 통신이 가능합니다. 
  + URL 통신은 브라우저를 통해서 사용이 가능하고 현재는 거의 모든 운영체제가 웹 브라우저를 하나씩 가지고 있습니다. 
  + 최근에는 웹에서도 소켓 방식의 통신이 가능합니다. 
  + WebSocket AP를 HTML5에서 제공

=> URL 구성
  + 프로토콜://도메인이나IP:포트번호/파일경로?이름=값&이름&값...
  + 프로토콜과 도메인은 생략 못함
  + 프로번호는 서비스의 기본 포트를 사용하는 경우에는 생략이 가능
  + http: 80, https: 443
  + 파일경로를 생략하는 경우가 있는데 이 경우는 서버의 설정을 이용해서 파일을 찾아옵니다. 
  + 파일 경로 뒤에 ?는 parameter라고 하는데 클라이언트가 서버에게 넘겨주는 데이터로 key-value 형식으로 대입
  + parameter 전송 방식을 가지고 GET 방식과 POST 방식을 구분
  + 파일 경로 뒤에 #이 붙는 경우는 책갈피 입니다.
	- 페이지 내에서 이동


1. java.net.URL 클래스
=> URL 을 만들기 위한 클래스

1) 생성
URL(String url)
=> 없는 URL 을 대입하면 MalformedURLException 이 발생

2) 메소드
> URLCOnnection openConnection(): URL 과 통신이 가능한 양방향 Connection을 리턴
> 여기서 리턴한 커넥션은 HttpURLConnection 이나 JarURLConnection 으로 형변환해서 사용해야 합니다. 

> URLConnection 은 추상 클래스라서 메소드가 구현되어 있지 않습니다. 


2. HttpURLConnection
=> URL 통신을 하기 위한 클래스
=> URL 클래스의 openConnection 메소드를 이용해서 생성
=> 메소드
setConnectTimeout(int timeout): 밀리초 단위로 타임아웃을 설정하는 메소드로 타임아웃 동안 접속이 안되면 접속 실패

setUseCaches(boolean isCache): 이전에 접속했던 URL에 다시 요청할 때 이전 데이터를 가져올 것인지 설정
  + 자주 변경되는 URL의 데이터는 반드시 false로 설정을 해주어야 합니다. 

setRequestProperty(String field, String value)
addRequestProperty(String field, String value)
헤더에 값을 추가하는 메소드

setRequestMethod(String method): 전송 방식을 설정

int getResponseCode(): 서버로부터의 상태를 리턴
200번대 정상응답
300번대 리다이렉트 중
400번대 클라이언트 오류(404 - 잘못된 URL)
500번대 서버 오류

InputStream getInputStream(): 데이터를 읽기 위한 스트림 리턴


3. 웹의 데이터 포맷
XML: 태그 형식으로 표현하는 포맷, 별도의 라이브러리 없이 파싱 가능

JSON: 자바스크립트 객체 표현 방법으로 데이터를 표현, 별도의 라이브러리를 추가해야 파싱 가능

CSV: 구분자가 있는 문자열

HTML: 뷰의 용도로 사용되는 포맷인데 사이트에서 XML이나 JSON 형태로 데이터를 제공해주지 않아서 사용
  + 파싱을 하려면 별도의 라이브러리를 추가해서 가능


4. Open API
> 데이터를 가진 곳에서 일반 사용자들에게 데이터를 사용할 수 있도록 XML 이나 JSON형식으로 제공하는 것
> 데이터 뿐 아니라 라이브러리나 프레임워크 등을 제공하기도 함

> 데이터는 대부분의 경우 가입을 해서 키를 받는 형태로 제공
> 키값은 주소에 넣기도 하고 헤더에 넣기도 합니다. 


5. 동기화한 다운로드



6. 비동기 다운로드
=> 위처럼 스레드를 사용하지 않고 다운로드 받는 방식을 동기식 이라고 합니다. 
  + 동기식은 데이터를 다운로드 받는 동안 다른 작업을 할 수 없습니다. 
  + 데이터 다운로드와 관련없는 작업도 데이터를 다운로드 동안은 수행할 수 없습니다. 
  + 네트워크 작업은 스레드를 이용해서 비동기식으로 동작하도록 만드는 것을 권장 (안드로이드는 필수)
  + 다운로드와 관련업는 작업은 다운로드 받는 동안 수행되도록 작성하는 것이 좋습니다. 



** XML Parsing ===================================================
=> RSS (Really Simple Syndication, Rich Site Summary): 
빠른 속도로 변경되는 데이터를 제공하기 위한 서비스로 예전에는 XML을 많이 사용

=> XML: 태그 형식으로 표현하는 데이터 포맷
XML의 해석은 XML 상단에 DTD가 있으면 DTD 가 하고, 없으면 개발자가 해석
=> HTML은 브라우저가 해석하기 때문에 우리가 원하는 내용만 골라서 보는게 안되고,
출력을 직접하게 되면 화면크기에 따라 원하는 모양으로 볼 수가 없습니다. 
  + 데이터를 제공해서 보고자 하는 쪽에서 원하는 것만 골라서 원하는 크기로 볼 수 있도록 해줍니다. 

1. XML Parsing
=> DOM(Document Object Model) Parser 이용
내용을 메모리에 트리 형태로 전부 펼쳐놓고 원하는 데이터를 찾아가는 방식

DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
DocumentBuilder = factory.newDocumentBuilder();
Document document = builder.parse(String uri);
// uri 대신에 InputStream inputStream, File file 을 대입해도 됩니다. 
// DOM의 형태로 메모리에 펼칩니다. 

// 루트 찾기
Element root = document.getDocumentElement();

// 원하는 태그 찾아오기
NodeList list = root.getElementsByTagName(String tag);
// 위에서 찾은 list를 가지고 반복문을 수행
int n = list.getLength();
for(int i = 0; i < n; i=i+1){
	Node item = list.item(i);
	Node text = item.getFirstChild();
	text.getNodeValue()	// 태그 안의 내용
}




=> http://www.hani.co.kr/rss/sports/: 한겨레 스포츠 RSS
위 주소에서 title과 link만 추출해서 출력




** java 에서의 외부 라이브러리 사용 ========================================================
=> 일반 java application 은 jar(java 압축 파일) 파일을 build path 에 추가
=> java web application 은 WEB-INF/lib 디렉토리에 jar 파일을 복사
=> maven 이나 gradle 기반의 프로젝트는 설정 파일에 의존성을 설정
=> 자바 라이브러리는 www.mvnrepository.com 에서 다운로드가능



**json parsing ========================================================

1. JSON
=> 자바스크립트 객체 표현법으로 데이터를 표현
파이썬 list 와 dict 표현법과도 동일 
  > {"key":"value", "key":"value"....} : 객체
  > ["data1", "data2"...] : 배열


2. 파싱을 하려면 외부 라이브러리를 이용
1) www.mvnrepository.com 에서 json 을 검색해서 다운로드

2) 다운로드 한 파일을 프로젝트에 복사

3) 복사한 파일을 선택하고 마우스 오른쪽을 클릭해서 [Build Path] - [Add To Build Path]를 클릭
Build Path에 추가하면 실행할 때 이 파일에 있는 클래스들을 jvm이 로드를 사용할 수 있도록 해줍니다. 


3. 파싱
1) JSONObject
=> 객체를 가져올 때 사용하는 자료형

2) JSONArray
=> 배열을 가져올 때 사용하는 자료형

3) 파싱 과정
문자열을 가지고 new JSONObject(String json) 이나 new JSONArray(String json)을 호출해서 객체나 배열을 생성

JSONObject 는 get자료형(String key): key에 해당하는 데이터를 자료형으로 리턴
JSONArray 는 get자료형(int index): index 에 해당하는 데이터를 자료형으로 리턴, 배열은 개수를 length 메소드로 리턴

4) kakao open api 사용
=> 최근의 open api 들은 인증키를 url에 포함시키지 않고 header에 포함시켜서 요청하도록 합니다. 
=> developer.kakao.com 에서 open api 데이터 사용을 신청

도서검색
URL - https://dapi.kakao.com/v3/search/book?target=title&query=검색할 도서명
HEader - Authorization: KakaoAK kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk

URL 은 반드시 인코딩을 해주어야 합니다. 
한글이 잇으면 UTF-8로 변환해서 대입해야 합니다.
java.net.Encoder.encode(String str, STring enctype);
java.net.Encoder.encode("미움받을 용기", "utf-8");

? 뒤에 들어가는 데이터를 parameter 라고하는데 이름=값=&이름=값... 의 형태
파라미터는 순서가 없기 때문에 아무거나 먼저 입력해도 됩니다. 



**HTML 파싱 ===================================================
=> 사이트에서 출력은 되어 있는데 Open API 형태로 데이터를 제공하지 않는 경우 HTML을 읽어서 사용
=> HTML 가져올 때는 URL 의 인코딩에 주의하고 읽어온 데이터의 인코딩에도 주의
=> 읽어야 하는 데이터가 ajax(비동기적으로 데이터 가져오는 기술) 형태로 만들어져 있거나 로그인을 해야하는 경우 또는 
자바스크립트 코드를 실행해야 하는 경우에는 selenium 같은 라이브러리를 사용해야 합니다. 
=> 자바에서 HTML 파싱에 많이 이용되는 라이브러리는 JSoup

tag: 중복 될 수 있습니다. 
id: 중복될 수 없습니다. - 개발자가 만든 것이라서 없는 태그도 있습니다.
class: 중복 될 수 있습니다. 
xpath: 중복 될 수 없습니다. - 태그의 경로라서 개발자가 만드는 것이 아니고 브라우저가 위치를 찾는 개념

selector: DOM 객체를 선택하기 위한 문법








