**오라클 연동
1. 프로젝트에 ojdbc.jar 파일을 복사하고 build path에 추가


2. 접속 정보를 저장할 텍스트 파일을 생성
=> 프로젝트 안에 db.txt 파일을 생성하고 작성
oracle.jdbc.driver.OracleDriver
jdbc:oracle:thin:@211.183.7.61:1521:xe
user17
user17



3. main 메소드를 소유한 ...
public class OracleMain {

	public static void main(String[] args) {
		try (BufferedReader br = new BufferedReader(
				new InputStreamReader(
						new FileInputStream("./dkanrjsk.txt")))) {
			String driverClass = br.readLine();
			//System.out.println(driverClass);
			String url = br.readLine();
			String id = br.readLine();
			String pw = br.readLine();
			
			// 드라이버 클래스 로드
			Class.forName(driverClass);
			// 데이터베이스 연결 객체 생성
			Connection con = DriverManager.getConnection(url, id, pw);
			System.out.println(con);
			
			con.close();
			
		}catch(Exception e) {
			System.out.println("데이터베이스 예외:" + e.getMessage());
			e.printStackTrace();
		}

	}

}

4. SQL 실행
1) Select 를 제외한 구문
PreparedStatement pstmt = con.prepareStatement("SQL 작성");
=> 입력받는 값들은 ?로 설정
pstmt.set자료형(?번호, 실제 데이터);
?개수 만큼 정확하게 매핑

int result = pstmt.executeUpdate();
// 리턴되는 값은 영향받은 행의 개수입니다. 
// 0이 리턴되면 조건에 맞는 데이터가 없는 것이고 1이상의 숫자면 테이블에 변화가 생김
// sql이 잘못되면 예외가 발생

pstmt.close();


**
1.
			// 데이터 삭제 - 기본키를 가지고 데이터를 삭제하는 것이 일반적
			PreparedStatement pstmt = 
					con.prepareStatement(
							"delete from transactions where num = ?");
			pstmt.setInt(1,  2);
			
			int result = pstmt.executeUpdate();
			if(result > 0) {
				System.out.println("삭제 성공");
			}else if(result == 0) {
				System.out.println("조건에 맞는 데이터가 없습니다.");
			}
			pstmt.close();
			
			con.close();
			
		}catch(Exception e) {
			System.out.println("데이터베이스 예외:" + e.getMessage());
			e.printStackTrace();
		}


2. 복호화가 불가능한 암호화
=> 비밀번호와 같은 데이터를 저장할 때는 관리자도 알아볼 수 없도록 복호화가 불가능한 형태로 저장해야 합니다. 
=> Java에서 JBCrypt 라이브러리를 이용해서 구현
암호화 할 때는 BCrypt.hashpw(String 평문, BCrypt.getSalt()); 
비교할 때는 BCrypt.checkpw(String 평문, String 암호화된 문장): 두 개가 일치하면 true, 그렇지 않으면 false
암호화를 할 때는 최소 64자리 이상 저장할 수 있어야 합니다. 

1) www.mvnrepository.com에서 jbcrypt 를 검색해서 다운로드 받아서 프로젝트에 복사하고 build path에 추가

2) 데이터를 삽입한느 구문을 



3. Transaction
=> 한 번에 이루어 져야 하는 작업의 논리적인 단위
=> SQL은 명령어 단위로 실행되는데 실제 업무에서는 여러 개의 SQL이 모여서 하나의 작업을 구성하는 경우가 많습니다. 
이런 경우에는 트랜잭션을 만들어서 전부 수행되거나 전부 수행되지 않도록 해주어야 합니다. (All or Nothing)

1) commit 과 rollback
=> commit은 현재까지 수행한 내용을 원본에 반영
=> rollback은 현재까지 수행한 내용을 원본에 반영하지 않음
=> savepoint는 rollback할 지점을 생성

2) 트랜잭션 처리 방법
auto commit: SQL 문장이 성공적으로 수행될 때 마다 바로 commit

manual commit: 명시적으로 commit이나 rollback을 호출해야 하는 방법

3) 트랜잭션 생성
=> commit이나 rollback을 한 후 첫번쨰 DML(insert, update, delete)을 만났을 때 생성

4) commit을 하지 않아도 commit을 수행하고 트랜잭션을 종료하는 경우
=> 접속 프로그램을 정상적으로 종료할 때
=> DDL(create, alter, drop, truncate, rename) 이나 DCL(grant, revoke)을 성공적으로 수행한 경우

5) 자동으로 rollback 되는 경우
=> 데이터베이스나 접속 프로그램이 비정상적으로 종료되는 경우

6) java에서의 트랜잭션 처리
=> java는 기본적으로 auto commit
=> manual commit을 하고자 하는 경우에는 Connection 객체가 setAutoCommit(false)를 호출하고
Connection 객체 가지고 commit() 이나 rollback()을 호출하면 됩니다. 


4. select 구문 실행
=> SELECT 구문은 PreparedStatement 객체를 가지고 executeQuery()를 호출하면 됩니다. 
ResultSet을 리턴합니다. 
=> ResultSet 은 조회된 데이터에 접근할 수 있는 Cursor의 역할을 합니다. 
next() 메소드를 이용해서 다음 데이터가 있는지 확인하고 있으면 다음 데이터를 가리킵니다. 
=> 각 컬럼의 데이터를 읽고자 하는 경우에는 ResultSet.get자료형(컬럼의 인덱스 또는 컬럼이름)으로 가져옵니다. 

=> 데이터를 읽어서 다른 곳에서 사용을 하고자 할 때는 검색된 데이터를 하나의 변수에 저장을 해야 합니다. 
 + 여러 개의 데이터의 경우는 컬럼의 데이터를 저장할 수 있는 DTO 클래스를 생성하거나 Map을 이용해서 저장하고
 + 이러한 DTO 클래스나 Map 클래스의 인스턴스들은 List에 저장합니다. 
 + 이런 구조를 R이나 Python의 pandas에서는 DataFrame이라고 합니다. 
  

=> DTO 패턴: Map 대신에 여러 개의 데이터를 저장할 수 있는 별도의 클래스를 만들어서 사용하는 패턴
이러한 클래스를 DTO(Date Transfer Object) 또는 VO(Variable Object) 또는 Domain 클래스라고 합니다. 



5. Map 과 DTO 비교
=> DTO 는 메소드를 호출해서 대입하고 가져오기 때문에 오류를 발생시킬 가능성이 줄어든다는 장점은 있지만
데이터 구조가 변경되는 경우에 수정할 부분이 많아 집니다. 
관계형 데이터베이스(RDMBS - 테이블 기반의 데이터베이스)의 특징입니다. 

=> Map을 사용하면 put이라는 메소드를 이용할 때 문자열로 키를 지정하고 get으로 읽어올 때 문자열로 키를
대입해야 하는데 이 때 키 이름등의 오류가 많이 발생합니다. 
데이터 구조가 변경되더라도 저장과 읽기 할 때 키만 변경하면 됩니다. 
NoSQL 데이터베이스의 특징


**Web Front End
HTML -> CSS -> JavaScript -> HTML5
HTML5 는 JavaScript를 사용






